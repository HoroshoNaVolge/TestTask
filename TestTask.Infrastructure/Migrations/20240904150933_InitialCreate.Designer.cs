// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask.Infrastructure.Data;

#nullable disable

namespace TestTask.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240904150933_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestTask.Domain.Entities.Cabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cabinets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = "Тестовый кабинет №1"
                        },
                        new
                        {
                            Id = 2,
                            Number = "Тестовый кабинет №2"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CabinetId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<int?>("UchastokId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UchastokId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UchastokId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UchastokId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Тестовый специализация №1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Тестовая специализация №2"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Uchastok", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uchastoks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = "Тестовый участок №1"
                        },
                        new
                        {
                            Id = 2,
                            Number = "Тестовый участок №2"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetId");

                    b.HasOne("TestTask.Domain.Entities.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");

                    b.HasOne("TestTask.Domain.Entities.Uchastok", "Uchastok")
                        .WithMany()
                        .HasForeignKey("UchastokId");

                    b.Navigation("Cabinet");

                    b.Navigation("Specialization");

                    b.Navigation("Uchastok");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Patient", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Uchastok", "Uchastok")
                        .WithMany()
                        .HasForeignKey("UchastokId");

                    b.Navigation("Uchastok");
                });
#pragma warning restore 612, 618
        }
    }
}
